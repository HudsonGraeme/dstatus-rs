name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build-assets:
    name: Build Assets
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    env:
      APPLE_SIGNING_CERTIFICATE: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
      APPLE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
      APPLE_NOTARIZATION_USERNAME: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
      APPLE_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev build-essential curl wget file libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev

      - name: Update Cargo.toml version
        run: |
          # Extract version from tag (remove 'v' prefix)
          VERSION=${GITHUB_REF_NAME#v}
          echo "Updating version to: $VERSION"

          # Update version in Cargo.toml
          sed -i.bak "s/^version = \".*\"/version = \"$VERSION\"/" Cargo.toml

          # Verify the change
          echo "Updated Cargo.toml version:"
          grep "^version" Cargo.toml

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Sign and Notarize macOS Binaries
        if: runner.os == 'macOS'
        run: |
          # Import certificate
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$APPLE_SIGNING_CERTIFICATE" | base64 --decode -o certificate.p12
          security create-keychain -p "temporary_password" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "temporary_password" $KEYCHAIN_PATH
          security import certificate.p12 -P "$APPLE_SIGNING_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          CERT_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Developer ID Application" | head -n 1 | awk -F '"' '{print $2}')

          # Define paths
          BINARY_NAME="dstatus"
          TARGET_BINARY_PATH="target/${{ matrix.target }}/release/${BINARY_NAME}"
          APP_BUNDLE_NAME="${BINARY_NAME}.app"
          MACOS_DIR="${APP_BUNDLE_NAME}/Contents/MacOS"
          CONTENTS_DIR="${APP_BUNDLE_NAME}/Contents"
          ASSET_NAME="dstatus-rs-${{ matrix.target }}"
          ZIP_FOR_NOTARY_PATH="${ASSET_NAME}-notary.zip"
          FINAL_ASSET_PATH="${ASSET_NAME}.zip"

          # Create the .app bundle structure
          mkdir -p "$MACOS_DIR"

          # Copy the executable
          cp "$TARGET_BINARY_PATH" "$MACOS_DIR/"

          # Create a minimal Info.plist
          VERSION=$(grep '^version' Cargo.toml | head -n 1 | awk -F '"' '{print $2}')
          cat > "${CONTENTS_DIR}/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>${BINARY_NAME}</string>
              <key>CFBundleIdentifier</key>
              <string>com.example.dstatus-rs</string>
              <key>CFBundleName</key>
              <string>${BINARY_NAME}</string>
              <key>CFBundleVersion</key>
              <string>${VERSION}</string>
              <key>CFBundleShortVersionString</key>
              <string>${VERSION}</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
          </dict>
          </plist>
          EOF

          # Sign the .app bundle itself (which also signs the executable inside)
          codesign --force --deep --options runtime --sign "$CERT_IDENTITY" "$APP_BUNDLE_NAME"

          # Package the signed .app bundle for notarization
          zip -r "$ZIP_FOR_NOTARY_PATH" "$APP_BUNDLE_NAME"

          # Notarize the zip file
          xcrun notarytool submit "$ZIP_FOR_NOTARY_PATH" --apple-id "$APPLE_NOTARIZATION_USERNAME" --password "$APPLE_NOTARIZATION_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait

          # Staple the .app bundle (NOT the zip)
          echo "Stapling .app bundle..."
          for i in {1..5}; do
            echo "Attempt $i to staple..."
            if xcrun stapler staple "$APP_BUNDLE_NAME"; then
              echo "Stapling successful."
              break
            fi
            if [ $i -lt 5 ]; then
              echo "Stapling failed. Retrying in 30 seconds..."
              sleep 30
            else
              echo "Stapling failed after 5 attempts."
              exit 1
            fi
          done

          # Re-package the stapled .app bundle for the final release asset.
          zip -r "$FINAL_ASSET_PATH" "$APP_BUNDLE_NAME"

          echo "ASSET_PATH=${FINAL_ASSET_PATH}" >> $GITHUB_ENV

      - name: Prepare asset for upload
        if: runner.os != 'macOS'
        shell: bash
        run: |
          ASSET_NAME="dstatus-rs-${{ matrix.target }}"
          tar -czvf "${ASSET_NAME}.tar.gz" -C "target/${{ matrix.target }}/release" "dstatus"
          echo "ASSET_PATH=${ASSET_NAME}.tar.gz" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.ASSET_PATH }}
          body: "Automated release of dstatus-rs."
          draft: false
          prerelease: false
