name: Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref_name }}
          body: "Automated release of dstatus-rs."
          draft: false
          prerelease: false

  build-assets:
    name: Build Assets
    needs: create-release
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            binary_name: dstatus-rs
          - target: x86_64-apple-darwin
            os: macos-latest
            binary_name: dstatus-rs
          - target: aarch64-apple-darwin
            os: macos-latest
            binary_name: dstatus-rs
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            binary_name: dstatus-rs.exe
    runs-on: ${{ matrix.os }}
    env:
      APPLE_SIGNING_CERTIFICATE: ${{ secrets.APPLE_SIGNING_CERTIFICATE }}
      APPLE_SIGNING_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_SIGNING_CERTIFICATE_PASSWORD }}
      APPLE_NOTARIZATION_USERNAME: ${{ secrets.APPLE_NOTARIZATION_USERNAME }}
      APPLE_NOTARIZATION_PASSWORD: ${{ secrets.APPLE_NOTARIZATION_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install target
        run: rustup target add ${{ matrix.target }}

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Sign and Notarize macOS Binaries
        if: runner.os == 'macOS'
        run: |
          # Import certificate
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$APPLE_SIGNING_CERTIFICATE" | base64 --decode -o certificate.p12
          security create-keychain -p "temporary_password" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "temporary_password" $KEYCHAIN_PATH
          security import certificate.p12 -P "$APPLE_SIGNING_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          CERT_IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep "Developer ID Application" | head -n 1 | awk -F '"' '{print $2}')

          # Sign binary
          codesign --force --options runtime --sign "$CERT_IDENTITY" "target/${{ matrix.target }}/release/${{ matrix.binary_name }}"

          # Package for notarization
          ASSET_NAME="dstatus-rs-${{ matrix.target }}"
          ditto -c -k --sequesterRsrc --keepParent "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "${ASSET_NAME}.zip"

          # Notarize
          xcrun notarytool submit "${ASSET_NAME}.zip" --apple-id "$APPLE_NOTARIZATION_USERNAME" --password "$APPLE_NOTARIZATION_PASSWORD" --team-id "$APPLE_TEAM_ID" --wait

          # Staple
          xcrun stapler staple "${ASSET_NAME}.zip"

          echo "ASSET_PATH=${ASSET_NAME}.zip" >> $GITHUB_ENV

      - name: Prepare asset for upload
        if: runner.os != 'macOS'
        shell: bash
        run: |
          ASSET_NAME="dstatus-rs-${{ matrix.target }}"
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            mv "target/${{ matrix.target }}/release/${{ matrix.binary_name }}" "target/${{ matrix.target }}/release/dstatus-rs.exe"
            7z a "${ASSET_NAME}.zip" "./target/${{ matrix.target }}/release/dstatus-rs.exe"
            echo "ASSET_PATH=${ASSET_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czvf "${ASSET_NAME}.tar.gz" -C "target/${{ matrix.target }}/release" "${{ matrix.binary_name }}"
            echo "ASSET_PATH=${ASSET_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
          asset_content_type: application/octet-stream
